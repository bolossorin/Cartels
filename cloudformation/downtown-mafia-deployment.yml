---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Environment:
    Type: String
    Default: Staging
    AllowedValues:
      - Staging
      - Production
  Version:
    Type: String
    Default: latest

Conditions:
  Is_Production:
    !Equals [!Ref Environment, "Production"]
  Is_Staging:
    !Equals [!Ref Environment, "Staging"]

Mappings:
  CertificateArn:
    us-east-1:
      Staging: arn:aws:acm:us-east-1:925000790351:certificate/51de6cba-73d5-4608-b399-5bfd35792d72
      Production: arn:aws:acm:us-east-1:925000790351:certificate/f4b31166-2364-4685-92c0-fb6171e82d93

Resources:
  FrontendService:
    DependsOn:
      - ALB
      - IamPolicyEc2
      - HTTPSListener
      - HTTPListener
      - BackendListenerRule
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "Bootleggers-ECS-${Environment}-EcsClusterId"
      DesiredCount: 1
      TaskDefinition: !Ref FrontendTask
      Role: !Ref FrontendRole
      LoadBalancers:
        - ContainerName: "downtown-mafia-frontend"
          ContainerPort: 8080
          TargetGroupArn: !Ref FrontendTG

  BackendService:
    DependsOn:
      - ALB
      - IamPolicyEc2
      - HTTPSListener
      - HTTPListener
      - BackendListenerRule
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "Bootleggers-ECS-${Environment}-EcsClusterId"
      DesiredCount: 2
      TaskDefinition: !Ref BackendTask
      Role: !Ref FrontendRole
      LoadBalancers:
        - ContainerName: "downtown-mafia-backend"
          ContainerPort: 8080
          TargetGroupArn: !Ref BackendTG

  FrontendTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: downtown-mafia-frontend
          Essential: true
          Environment:
            - Name: AWS_ENV
              Value: !Sub "/downtown-mafia/${Environment}"
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/downtown-mafia-frontend:${Version}"
          Memory: 128
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FrontendLogGroup
              awslogs-region: !Ref AWS::Region

  BackendTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: downtown-mafia-backend
          Essential: true
          Environment:
            - Name: AWS_ENV
              Value: !Sub "/downtown-mafia/${Environment}"
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/downtown-mafia-backend:${Version}"
          Memory: 128
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
        - Name: downtown-mafia-php
          Essential: true
          Environment:
            - Name: AWS_ENV
              Value: !Sub "/downtown-mafia/${Environment}"
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/downtown-mafia-php:${Version}"
          Memory: 128
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PHPLogGroup
              awslogs-region: !Ref AWS::Region

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-Frontend"
      RetentionInDays: 7

  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-Backend"
      RetentionInDays: 7

  PHPLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-PHP"
      RetentionInDays: 7

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: routing.http2.enabled
          Value: "true"
      Subnets:
        - !ImportValue Ecs-Vpc-Subnet-A
        - !ImportValue Ecs-Vpc-Subnet-B
        - !ImportValue Ecs-Vpc-Subnet-C
      SecurityGroups:
        - Fn::ImportValue:
            !Sub Bootleggers-ECS-${Environment}-SecurityGroupId
        - !Ref ALBSecurityGroup

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: "443"
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: "HTTP_302"
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTG
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !FindInMap [CertificateArn, !Ref "AWS::Region", !Ref Environment]

  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTG
      Conditions:
        - Field: path-pattern
          Values:
            - "/api/*"
      ListenerArn: !Ref HTTPSListener
      Priority: 1

  FrontendTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200-299
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue Ecs-Vpc-VpcId

  BackendTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /api/graphql
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: 200-299
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue Ecs-Vpc-VpcId

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Public Access
      VpcId: !ImportValue Ecs-Vpc-VpcId

  ALBSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ALBSecurityGroup'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  ALBSecurityGroupHTTPSinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ALBSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  FrontendRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"

  IamPolicyEc2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-Policy-EC2"
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:Describe*
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:Describe*
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:RegisterTargets
              - ssm:Get*
            Resource: "*"
      Roles:
        - Ref: FrontendRole

  FrontendScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-Scaling-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole

  FrontendScalingRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref FrontendScalingRole
      PolicyName: !Sub "${AWS::StackName}-Scaling-Role-Policy1"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - application-autoscaling:*
              - ecs:RunTask
              - ecs:UpdateSerice
              - ecs:DescribeServices
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DescribeAlarms
              - cloudwatch:GetMetricStatistics
              - cloudwatch:SetAlarmState
              - cloudwatch:DeleteAlarms
            Resource: '*'

  FrontendScalableTarget:
    DependsOn:
      - FrontendTask
      - FrontendScalingRolePolicy
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Sub
        - 'service/${Cluster}/${Service}'
        - Cluster: {'Fn::ImportValue': !Sub "Bootleggers-ECS-${Environment}-EcsClusterId"}
          Service: !Select [2, !Split ["/", !Ref FrontendService]]
      RoleARN: !GetAtt FrontendScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  BackendScalableTarget:
    DependsOn:
      - BackendTask
      - FrontendScalingRolePolicy
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 2
      ResourceId: !Sub
        - 'service/${Cluster}/${Service}'
        - Cluster: {'Fn::ImportValue': !Sub "Bootleggers-ECS-${Environment}-EcsClusterId"}
          Service: !Select [2, !Split ["/", !Ref BackendService]]
      RoleARN: !GetAtt FrontendScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  FrontendScalingPolicy:
    DependsOn:
      - FrontendService
      - FrontendTask
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-Scaling-Policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref FrontendScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  EnvDNSRSGEnvironment:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: codeorder.com.
      Comment: !Sub "${Environment} environment for downtown-mafia.com."
      RecordSets:
        - Name: !Sub "dtm.${Environment}.codeorder.com"
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
            DNSName: !GetAtt ALB.DNSName

Outputs:
  ServiceName:
    Description: ECS Service Name
    Value: !GetAtt FrontendService.Name
    Export:
      Name: !Sub "${AWS::StackName}-Service-Name"
  ServiceArn:
    Description: ECS Service Arn
    Value: !Ref FrontendService
    Export:
      Name: !Sub "${AWS::StackName}-Service-Arn"
  ALB:
    Description: Alb Arn
    Value: !Ref ALB
    Export:
      Name: !Sub "${AWS::StackName}-Alb-Arn"
